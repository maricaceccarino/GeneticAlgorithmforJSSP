/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package it.unina.ceccarino.gaforjss.gui.panels;

import it.unina.ceccarino.gaforjss.algo.GeneticManipulator;
import it.unina.ceccarino.gaforjss.algo.Population;
import it.unina.ceccarino.gaforjss.gui.abstracts.tree.AbstractTreeTableModel;
import it.unina.ceccarino.gaforjss.gui.abstracts.tree.DataModel;
import it.unina.ceccarino.gaforjss.gui.abstracts.tree.DataNode;
import it.unina.ceccarino.gaforjss.gui.abstracts.tree.TreeTable;
import it.unina.ceccarino.gaforjss.gui.abstracts.tree.TreeTableCellRenderer;
import it.unina.ceccarino.gaforjss.model.InputManager;
import it.unina.ceccarino.gaforjss.model.JobIndividual;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.util.Optional;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author sommovir
 */
public class PopulationPanel extends javax.swing.JPanel {

    /**
     * Creates new form PopulationPanel
     */
    public PopulationPanel() {
        initComponents();
        this.jPanel_Container.setLayout(new GridLayout(0, 1));

        AbstractTreeTableModel treeTableModel = new DataModel(createDataStructure());

        final TreeTable myTreeTable = new TreeTable(treeTableModel);
        myTreeTable.getColumnModel().getColumn(0).setMinWidth(140);
//        myTreeTable.getColumnModel().getColumn(0).setMaxWidth(80);
        int dimension = InputManager.getInstance().getDimension();
        for (int i = 1; i < dimension; i++) {
            myTreeTable.getColumnModel().getColumn(i).setPreferredWidth(40);
            myTreeTable.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
                    if (myTreeTable.isRowExpanded(row)) {
                        c.setBackground(Color.red);
                    } else {
                        if (isSelected) {
                            c.setBackground(table.getSelectionBackground());
                        } else {
                            c.setBackground(table.getBackground());
                        }
                    }
                    return c;
                }

            });
        }

        this.jPanel_Container.add(new JScrollPane(myTreeTable));

    }

    private static DataNode createDataStructure() {
        DataNode root = new DataNode("Root");
        Population pop = InputManager.getInstance().generatePopulation();
        GeneticManipulator.getInstance().loadInitialPopulation(pop);
        int lastIndexToDecorate = GeneticManipulator.getInstance().getAffectedIndividuals();
        int i = 0;
        for (JobIndividual individual : pop.getIndividuals()) {

            //<html><font color = red><b>
            String decoration = "";
            if (i <= lastIndexToDecorate) {
                decoration = TreeTableCellRenderer.HTML_DEOCORATION_1;
            }
            DataNode node = new DataNode(ArrayUtils.toObject(individual.getJobPermutation()), decoration + individual.getFitness());
            node.addChild(new DataNode(ArrayUtils.toObject(individual.getOperationSequence()), TreeTableCellRenderer.HTML_DEOCORATION_2 + "operations"));
            node.addChild(new DataNode(individual.getMachinesSelected(), TreeTableCellRenderer.HTML_DEOCORATION_2 + "machines"));
            node.addChild(new DataNode(ArrayUtils.toObject(individual.getComplationArray()), TreeTableCellRenderer.HTML_DEOCORATION_2 + "completion"));
            root.addChild(node);
            i++;
        }

        return root;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jPanel_Container = new javax.swing.JPanel();

        jToolBar1.setRollover(true);

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        javax.swing.GroupLayout jPanel_ContainerLayout = new javax.swing.GroupLayout(jPanel_Container);
        jPanel_Container.setLayout(jPanel_ContainerLayout);
        jPanel_ContainerLayout.setHorizontalGroup(
            jPanel_ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel_ContainerLayout.setVerticalGroup(
            jPanel_ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 469, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel_Container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_Container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel_Container;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
